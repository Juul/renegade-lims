'use strict';

const ROWS = 8;
const COLS = 12;

// char code for uppercase A
const aCharCode = 'A'.charCodeAt(0);

function wellToIndex(wellName) {
  if(typeof wellName !== 'string' || wellName.length < 2 || wellName.length > 3) {
    throw new Error("Invalid well name: " + wellName);
  }

  const rowIndex = wellRowToNumber(wellName);
  const colIndex = parseInt(wellName.slice(1)) - 1;
  if(colIndex < 0 || colIndex >= COLS) {
    throw new Error("Invalid column number: " + colIndex);
  }

  return rowIndex * COLS + colIndex;
}

// expects that we're counting from zero
function wellRowToLetter(wellRow) {
  if(wellRow >= 12) throw new Error("Well row too high for 96 well plate");
  return String.fromCharCode(aCharCode + wellRow);
}

function wellIndexToName(wellIndex) {
  const col = (wellIndex % 12) + 1;
  const row = Math.floor(wellIndex / 12);

  return wellRowToLetter(row)+col;
}

function header(model, plate) {
  if(!plate.barcode) throw new Error("Plate must have a barcode in order to generate .txt plate layout file");
  return `* Experiment Barcode = ${plate.barcode}
* Experiment Comment = Generated by renegade-lims

[Sample Setup]
Well\tWell Position\tSample Name\tSample Color\tBiogroup Name\tBiogroup Color\tTarget Name\tTarget Color\tTask\tReporter\tQuencher\tQuantity\tComments
`;
}

const sampleColors = {
  'POS': '255,0,0',
  'NTC': '0,0,255',
  'sample': '0,255,0'
};

const targetColors = {
  'Target 1': '176,23,31',
  'Target 2': '0,0,255'
};

const reporters = {
  'Target 1': 'FAM',
  'Target 2': 'CYS'
};

const quenchers = {
  'Target 1': 'None',
  'Target 2': 'NFQ-MGB'
};

function wellRow(model, wellIndex, wellName, sampleName, sampleType, targetName) {
  const sampleColor = sampleColors[sampleType];
  if(!sampleColor) throw new Error("Unknown sample type: " + sampleType);

  const targetColor = targetColors[targetName];
  if(!targetColor) throw new Error("Unknown target name: " + targetName);

  const reporter = reporters[targetName];
  if(!reporter) throw new Error("Unknown target name: " + targetName);

  const quencher = quenchers[targetName];
  if(!quencher) throw new Error("Unknown target name: " + targetName);
  
  return `${wellIndex}\t${wellName}\t${sampleName}\t"RGB(${sampleColor})"\t\t\t${targetName}\t"RGB(${targetColor})"\tUNKNOWN\t${reporter}\t${quencher}\t\t`;
}

function emptyWellRow(model, wellIndex, wellName) {
  return `${wellIndex}\t${wellName}\t\t\t\t\t\t\t\t\t\t\t`;
}

function wellRows(model, wellIndex, wellName, sampleName) {

  if(!sampleName) {
    return emptyWellRow(model, wellIndex, wellName);
  }
  
  var sampleType;
  if(sampleName === 'NTC') {
    sampleType = 'NTC';
  } else if(sampleName === 'POS') {
    sampleType = 'POS';
  } else {
    sampleType = 'sample';
  }
  
  var lines = [];
  lines.push(
    wellRow(model, wellIndex, wellName, sampleName, sampleType, 'Target 1')
  );
  lines.push(
    wellRow(model, wellIndex, wellName, sampleName, sampleType, 'Target 2')
  );  

  return lines.join("\n");
}

function generate(model, plate) {
  if(model !== 'qs6') {
    throw new Error("The only model currently supported is 'qs6'");
  }
  var txt = header(model, plate);
  
  var i, wellName, sampleName, wellIndex;
  for(i=0; i < 96; i++) {
    wellName = wellIndexToName(i);
    wellIndex = i+1; // we count from zero but the .txt format does not
    sampleName = plate.wells[wellName];
    
    txt += wellRows(model, wellIndex, wellName, sampleName) + "\n";
  }

  return txt;
}

module.exports = {
  generate
};
