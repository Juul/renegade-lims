'use strict';

var path = require('path');
var fs = require('fs');

module.exports = {

  // Replication and lab-device server socket
  // Comment these out to disable replication server
  host: 'localhost',
  port: 4200,
  
  // HTTP(S) server socket
  // Comment these out to disable webserver
  // If either webTLSKey or webTLSCert is not set
  // then webserver will be HTTP, otherwise it will be HTTPS
  webHost: 'localhost',
  webPort: 8000, // defaults to 80 for HTTP and 443 for HTTPS
  // webTLSKey: fs.readFileSync('tls/web_key.pem'),
  // webTLSCert: fs.readFileSync('tls/web_cert.pem'),

  // If this is set then anyone with the master password
  // can create a non-admin account
  masterPassword: 'foobarbaz',

  dataPath: './data',
  staticPath: './static',
  staticUserPath: './user-static',
  
  tlsKey: fs.readFileSync('tls/key.pem'),
  tlsCert: fs.readFileSync('tls/cert.pem'),
  
  tlsPeers: [
    {
      type: 'server', // server peers have full access to db
      connect: {
        host: 'localhost',
        port: 4444,
      },
      cert: fs.readFileSync('tls/peers/server.localhost.pem')
    },
    {
      type: 'lab', // lab peers have full access to db
      description: "some computer",
      cert: fs.readFileSync('tls/peers/lab.localhost.pem')
    },
    {
      type: 'field', // field peers can't access lab inventory
      description: "juul's laptop",
      cert: fs.readFileSync('tls/peers/field.localhost.pem')
    },
    {
      type: 'lab-device', // lab devices have no database access at all
      description: "label printer",
      cert: fs.readFileSync('tls/peers/lab-device.localhost.pem')
    },
    {
      type: 'decapper', // lab devices have no database access at all
      description: "Hamilton DeCapper",
      cert: fs.readFileSync('tls/peers/decapper.localhost.pem')
    }
  ],
  
  loginToken: {
    secret: "MY UNIQUE SECRET", // must be a server-unique secret
    expiration: 14 // login token expiration in days
  },

  // If a user with this name doesn't exist
  // then this user will be created as an admin
  initialUser: {
    name: "admin",
    email: "admin@example.org",
    password: "dontpanic"
  },

  checkTimeEvery: 60 * 60, // how often to check time accuracy (in seconds)
  ntpServers: [
    {host: '0.pool.ntp.org', port: 123},
    {host: '1.pool.ntp.org', port: 123},
    {host: '2.pool.ntp.org', port: 123},
    {host: '3.pool.ntp.org', port: 123}
  ],

  // Prefix added to all non-GUID barcodes in this lab
  // this must be lab-unique within the constellation of labs that share data
  labBarcodePrefix: 'A',

  // Device to use for webcam-based DataMatrix scanning
  // Comment out if you don't have such a device
  dataMatrixScanner: "/dev/video0",

  // Settings related to label printing
  labDevice: {

    // Where label image files are stored.
    // Relative to userFilePath
    labelImageFilePath: path.join(__dirname, 'static', 'labels'),

    // hostname where we should listen for printer client connections
    // (this is optional: falls back to settings.hostname if not specified)
    // serverHost: "localhost",

    // port where we should listen for printer client connections
    serverPort: 4200,

    // path to the host ssh private key
    hostKey: path.join(__dirname, 'labdevice', 'hostkey'),

    // path to directory containing the public keys of authorized labdevice clients
    clientKeys: path.join(__dirname, 'labdevice', 'client_keys')
  },

  // Where to log failed attempts to sign up or log in
  attemptsLog: 'log/attempts.log',

  // A Rimbaud REST API endpoint
  rimbaud: {
    host: 'example.com', // REST server
    port: 443, // server port for https
    basePath: '/rim-lab-rest', // where the web app is mounted
    secretKey: '<your secret key>',
    synchronizeOrders: 1200 // automatically sync order and sample ID assocications to rimbaud as they come into existance and re-try every this many seconds (only one peer in the renegade-lims network should be doing this)
  },

  // Settings relating to .eds file generating and parsing
  eds: {
    // Generated .eds files should have this SampleVolume
    // set in tcprotocol.xml
    sampleVolume: 30.0
  }

};
